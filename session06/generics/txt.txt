What Are Generics?
At its core, the term generics means parameterized types. Parameterized types are important
because they enable you to create classes, interfaces, and methods in which the type of data
upon which they operate is specified as a parameter. Using generics, it is possible to create a
single class, for example, that automatically works with different types of data. A class,
interface, or method that operates on a parameterized type is called generic, as in generic
class or generic method.
It is important to understand that Java has always given you the ability to create
generalized classes, interfaces, and methods by operating through references of type Object.
Because Object is the superclass of all other classes, an Object reference can refer to any
type object. Thus, in pre-generics code, generalized classes, interfaces, and methods used
Object references to operate on various types of objects. The problem was that they could
not do so with type safety.
Generics added the type safety that was lacking. They also streamlined the process,
because it is no longer necessary to explicitly employ casts to translate between Object
and the type of data that is actually being operated upon. With generics, all casts are
automatic and implicit. Thus, generics expanded your ability to reuse code and let you do
so safely and easily.